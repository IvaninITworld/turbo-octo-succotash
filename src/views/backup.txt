// 강사님 코드 

<template>
  <div class="container"></div>
</template>

<script>
import * as THREE from 'three'
// import { RectAreaLightHelper } from 'three/examples/jsm/helpers/RectAreaLightHelper'
// import { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib'
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'

export default {
  name: 'AboutView',
  mounted() {
    const scene = new THREE.Scene()
    scene.background = new THREE.Color(0x555555)
    const camera = new THREE.PerspectiveCamera(45, (window.innerWidth - 20) / (window.innerHeight / 2), 0.1, 1000)
    camera.position.x = 12
    camera.position.y = 10
    camera.position.z = 10
    camera.lookAt(0, 0, 0)
    scene.add(camera)

    const camera2 = new THREE.PerspectiveCamera(10, (window.innerWidth - 20) / (window.innerHeight / 2), 0.1, 1000)
    camera2.position.x = 6
    camera2.position.y = 30
    camera2.position.z = -10
    camera2.lookAt(0, 0, 0)
    scene.add(camera2)

    // camera.fov = 46;
    // camera.zoom = 2.5;
    camera.updateProjectionMatrix()

    const renderer = new THREE.WebGLRenderer()
    renderer.setPixelRatio(window.devicePixelRatio)
    renderer.setSize(window.innerWidth - 20, window.innerHeight / 2)
    renderer.shadowMap.enabled = true
    // renderer.outputEncoding = THREE.sRGBEncoding;

    const container = document.querySelector('.container')
    container.appendChild(renderer.domElement)

    const light = new THREE.AmbientLight(0xffffff, 0.6)
    scene.add(light)

    const spotLight = new THREE.SpotLight(0xfd97e2, 0.3, 10, 10, 1, 1)
    spotLight.position.y = 10
    scene.add(spotLight)
    // scene.add(new THREE.SpotLightHelper(spotLight))

    // const material = new THREE.MeshStandardMaterial({ color: 'red' })
    const material = new THREE.MeshPhongMaterial()

    // box
    const boxGeometry = new THREE.BoxGeometry(2, 2, 2)
    const boxMesh = new THREE.Mesh(boxGeometry, material.clone())
    boxMesh.position.z = -2
    // scene.add(boxMesh) group 을 묶을 예정이기 때문에

    const boxGeometry2 = new THREE.BoxGeometry(2, 2, 2)
    const boxMesh2 = new THREE.Mesh(boxGeometry2, material.clone())
    boxMesh2.position.z = 2
    // scene.add(boxMesh2) group 을 묶을 예정이기 때문에

    const groupObject = new THREE.Group()
    groupObject.add(boxMesh)
    groupObject.add(boxMesh2)
    scene.add(groupObject)

    // scene.add(group)

    // circle
    const circleGeometry = new THREE.CircleGeometry(2, 30)
    const circleMesh = new THREE.Mesh(circleGeometry, material.clone())
    circleMesh.position.x = 4
    scene.add(circleMesh)

    scene.add(new THREE.AxesHelper(3))

    // cylinder
    const cylinderGeometry = new THREE.CylinderGeometry(1, 1, 2, 24)
    const cylinderMesh = new THREE.Mesh(cylinderGeometry, material.clone())
    cylinderMesh.position.x = -4
    scene.add(cylinderMesh)
    scene.add(new THREE.BoxHelper(cylinderMesh))

    // sphere
    const sphereGeometry = new THREE.SphereGeometry(1, 30, 30)
    const sphereMesh = new THREE.Mesh(sphereGeometry, material.clone())
    sphereMesh.position.z = 4
    sphereMesh.position.y = 2
    sphereMesh.layers.enable(1)
    scene.add(sphereMesh)

    sphereMesh.add(new THREE.AxesHelper(3))

    // grid
    // const gridHelper = new THREE.GridHelper(30, 30)
    // scene.add(gridHelper)

    // const gridHelper2 = new THREE.GridHelper(30, 30)
    // gridHelper2.rotateX(Math.PI / 2)
    // scene.add(gridHelper2)

    const control = new OrbitControls(camera, renderer.domElement)

    const raycaster = new THREE.Raycaster()
    raycaster.layers.set(1)
    const pointer = new THREE.Vector2()

    renderer.domElement.addEventListener('pointerdown', event => {
      const cx = event.clientX
      const cy = event.clientY
      const tx = event.offsetX
      const ty = event.offsetY

      const boundX = cx - tx
      const boundY = cy - ty

      const rx = cx - boundX
      const ry = cy - boundY

      const width = renderer.domElement.clientWidth
      const height = renderer.domElement.clientHeight

      const px = rx / width
      const py = ry / height

      const wX = px * 2 - 1
      const wY = -py * 2 + 1

      pointer.set(wX, wY)

      raycaster.setFromCamera(pointer, camera)
      const intersects = raycaster.intersectObjects(scene.children)

      if (intersects.length > 0) {
        const intersect = intersects[0]
        intersect.object.material.color.set(THREE.MathUtils.randInt(0x000000, 0xffffff))
      }
    })

    window.addEventListener('resize', () => {
      camera.aspect = (window.innerWidth - 20) / (window.innerHeight / 2)
      camera.updateProjectionMatrix()
      renderer.setSize(window.innerWidth - 20, window.innerHeight / 2)
    })

    render()

    function render() {
      control.update()
      groupObject.rotation.x += 0.01
      // group.rotation.x += 0.01

      sphereMesh.rotation.x += 0.01

      renderer.render(scene, camera)
      requestAnimationFrame(render)
    }
  }
}
</script>
